# Generated by Django 2.2.5 on 2020-02-16 18:22

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExternalCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_number', models.IntegerField(null=True)),
                ('reference_number', models.IntegerField(null=True)),
                ('description', models.CharField(blank=True, help_text='Additional indication that is written on the card.', max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True, verbose_name='name')),
                ('description', models.TextField(blank=True)),
                ('email', models.EmailField(blank=True, max_length=254)),
            ],
            options={
                'verbose_name': 'group',
                'verbose_name_plural': 'groups',
            },
        ),
        migrations.CreateModel(
            name='GSuiteAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Key',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(unique=True)),
                ('room_name', models.CharField(blank=True, max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('initials', models.CharField(blank=True, max_length=30)),
                ('street', models.CharField(blank=True, max_length=150)),
                ('postal_code', models.CharField(blank=True, max_length=30)),
                ('city', models.CharField(blank=True, max_length=150)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('preferred_language', models.CharField(blank=True, choices=[('en-us', 'English'), ('nl-nl', 'Dutch')], max_length=30)),
                ('tue_card_number', models.IntegerField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=30, null=True)),
                ('is_student', models.BooleanField(blank=True, null=True)),
                ('membership_start', models.DateField(blank=True, null=True)),
                ('membership_end', models.DateField(blank=True, null=True)),
                ('permission_exquus', models.BooleanField(blank=True, null=True)),
                ('sepa_direct_debit', models.BooleanField(blank=True, null=True)),
                ('bhv_certificate', models.DateField(blank=True, null=True)),
                ('external_card_deposit_made', models.BooleanField(blank=True, null=True)),
                ('field_of_study', models.CharField(blank=True, max_length=150)),
                ('found_via', models.CharField(blank=True, max_length=30)),
                ('iban', models.CharField(blank=True, max_length=150)),
                ('person_id', models.CharField(blank=True, max_length=30)),
                ('keywatcher_id', models.CharField(blank=True, max_length=4)),
                ('keywatcher_pin', models.CharField(blank=True, max_length=4)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('external_card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tutti.ExternalCard')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', to='tutti.Group', verbose_name='groups')),
                ('gsuite_accounts', models.ManyToManyField(blank=True, to='tutti.GSuiteAccount')),
                ('instruments', models.ManyToManyField(blank=True, to='tutti.Instrument')),
                ('key_access', models.ManyToManyField(blank=True, to='tutti.Key')),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateField(auto_now_add=True, verbose_name='Start date')),
                ('end', models.DateField(blank=True, null=True, verbose_name='End date')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tutti.Group')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tutti.Person')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
